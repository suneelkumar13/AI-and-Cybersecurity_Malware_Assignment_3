# -*- coding: utf-8 -*-
"""N-gram Features for Binary Files.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LTSQUwugeeROG2YRiSiu8dM_sH5X1NAo

In this exercise, we will use the ngrams toolset of the Natural Language ToolKit (NLTK) to extract N-gram features from "mkdir.exe". We also find the 50 most frequently repeated N-grams in the file.
"""

#to install NLTK, uncomment and run the following line:
!pip install nltk

import collections
from nltk import ngrams
file = "mkdir.exe"

#Reads and returns the byte code from the file
def readFile(filePath):
    with open(filePath, "rb") as binary_file:
        data = binary_file.read()
    return data

#Generates n-grams from the byte code
def byteSequenceToNgrams(byteSequence, n):
    Ngrams = ngrams(byteSequence, n)
    return list(Ngrams)
    
#Generates n-grams from binary file,
# and returns the frequency of each n-gram
def extractNgramCounts(file, N):
    fileByteSequence = readFile(file)
    fileNgrams = byteSequenceToNgrams(fileByteSequence, N)
    return collections.Counter(fileNgrams)

extractedNgrams = extractNgramCounts(file, 3)

extractedNgrams

#print the top 50 most common n-grams
print(extractedNgrams.most_common(50))

"""**Exercise:** Find the largest value of N for which there exists at least one N-gram with with a frequency of 3 or more. """

# Your code
n_space = range(900, 911, 1)
for N in n_space:
    extractedNgrams = dict(extractNgramCounts(file, N))
    max_freq = max(list(extractedNgrams.values()))
    #print(N,freq)
    if  freq < 5:
        print(N)
        break

#Hence Answer = 905
extractedNgrams = dict(extractNgramCounts(file, 905))
max(list(extractedNgrams.values()))

extractedNgrams = dict(extractNgramCounts(file, 906))
max(list(extractedNgrams.values()))

